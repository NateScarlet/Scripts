# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: "0.2.0"
  assertions:
    - resource: Microsoft.Windows.Developer/OsVersion
      directives:
        description: Verify min OS version requirement
        allowPrerelease: true
      settings:
        MinVersion: "10.0.22000"
  resources:
    - directives:
        description: ConfigureWindowsSettings
      resource: Microsoft.Windows.Settings/WindowsSettings
      settings:
        AppColorMode: Dark
        SystemColorMode: Dark
        TaskbarAlignment: Top

    - directives:
        description: Install 7zip
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: 7zip.7zip
        source: winget

    - directives:
        description: Install AutoHotkeyV1
      id: auto-hotkey-v1
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: AutoHotkey.AutoHotkey
        version: 1.1.37.02

    - directives:
        description: Install AutoHotkeyV2
      dependsOn:
        - auto-hotkey-v1 # 从 v1 升级，这样可以兼容运行 v1
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: AutoHotkey.AutoHotkey

    - directives:
        description: Install BilibiliLivehime
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Bilibili.Livehime

    - directives:
        description: Install FFmpeg
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: BtbN.FFmpeg.GPL.Shared

    - directives:
        description: Install Caddy
      id: caddy
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: CaddyServer.Caddy

    - resource: PSDscResources/Script
      dependsOn:
        - caddy
      directives:
        description: Ensure Caddy service is installed and configured
        allowPrerelease: false
        securityContext: elevated
      settings:
        GetScript: |
          $service = Get-Service -Name "Caddy" -ErrorAction SilentlyContinue
          $state = @{
              Name = "Caddy"
              Ensure = if ($service) { "Present" } else { "Absent" }
              Status = if ($service) { $service.Status.ToString() } else { "Absent" }
          }
          return $state
        TestScript: |
          $currentState = [scriptblock]::Create($GetScript).Invoke()[0]
          return $currentState.Ensure -eq "Present"
        SetScript: |
          # 查找caddy.exe
          $caddyPath = (Get-Command "caddy.exe" -ErrorAction SilentlyContinue).Source
          if (-not $caddyPath) {
              throw "Caddy executable not found in PATH"
          }

          # 构建服务参数
          $configPath = "$env:USERPROFILE\caddy\Caddyfile"
          $binPath = "`"$caddyPath`" run --config `"$configPath`""

          # 检查并创建/更新服务
          $service = Get-Service -Name "Caddy" -ErrorAction SilentlyContinue
          if ($service) {
              if ($service.Status -ne "Stopped") {
                  Stop-Service -Name "Caddy" -Force
              }
              sc.exe config "Caddy" binPath= "$binPath" start= auto
          } else {
              sc.exe create "Caddy" binPath= "$binPath" start= auto displayName= "Caddy Web Server"
          }

          # 启动服务
          Start-Service -Name "Caddy"

    - directives:
        description: jq
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: jqlang.jq

    - directives:
        description: Install Ubuntu
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Canonical.Ubuntu

    - directives:
        description: Install ClashVergeRev
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: ClashVergeRev.ClashVergeRev

    - directives:
        description: Install DockerDesktop
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Docker.DockerDesktop

    - directives:
        description: Install EpicGamesLauncher
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: EpicGames.EpicGamesLauncher

    - directives:
        description: Install Git
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Git.Git

    - directives:
        description: Install GithubCLI
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Github.cli

    - directives:
        description: Install GnuPG
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: GnuPG.GnuPG

    - directives:
        description: Install Gpg4win
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: GnuPG.Gpg4win

    - directives:
        description: Install Go
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: GoLang.Go

    - directives:
        description: Install ImageMagick
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: ImageMagick.ImageMagick

    - directives:
        description: Install Dandanplay
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Kaedei.Dandanplay

    - directives:
        description: Install Krita
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: KDE.Krita

    - directives:
        description: Install BulkCrapUninstaller
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Klocman.BulkCrapUninstaller

    - directives:
        description: Install PowerShell
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Microsoft.PowerShell

    - directives:
        description: Install PowerToys
      id: power-toys
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Microsoft.PowerToys

    - resource: PowerToysConfigure
      directives:
        description: Configure PowerToys
      dependsOn:
        - power-toys
      settings:
        PowerLauncher:
          Enabled: true
          OpenPowerLauncher: "Win+`"

    - directives:
        description: Install VS2022BuildTools
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Microsoft.VisualStudio.2022.BuildTools

    - directives:
        description: Install VSCode
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Microsoft.VisualStudioCode

    - directives:
        description: Install WindowsTerminal
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Microsoft.WindowsTerminal

    - directives:
        description: Install FirefoxCN
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Mozilla.Firefox.zh-CN

    - directives:
        description: Install MpvNet
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: mpv.net

    - directives:
        description: Install MSYS2
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: MSYS2.MSYS2

    - directives:
        description: Install Obsidian
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Obsidian.Obsidian

    - directives:
        description: Install OBSStudio
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: OBSProject.OBSStudio

    - directives:
        description: Install Ollama
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Ollama.Ollama

    - directives:
        description: Install NodeJS
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: OpenJS.NodeJS.LTS

    - directives:
        description: Install Pnpm
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: pnpm.pnpm

    - directives:
        description: Install PythonLauncher
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Python.Launcher

    - directives:
        description: Install Python313
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Python.Python.3.13

    - directives:
        description: Install RimeWeasel
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Rime.Weasel

    - directives:
        description: Install ShareX
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: ShareX.ShareX

    - directives:
        description: Install FreeDownloadManager
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: SoftDeluxe.FreeDownloadManager

    - directives:
        description: Install Stretchly
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Stretchly.Stretchly

    - id: syncthing
      directives:
        description: Install Syncthing
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Syncthing.Syncthing

    - resource: PSDscResources/Script
      dependsOn:
        - syncthing
      directives:
        description: Create/Update Syncthing autostart task
        securityContext: elevated
      settings:
        GetScript: |
          $taskName = "Syncthing Startup"
          $task = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue

          # 从任务描述中提取版本号
          $version = if ($task) { 
              if ($task.Description -match "Version: (\d+)") {
                  [int]$matches[1]
              } else {
                  0
              }
          } else {
              0
          }

          return @{ Version = $version }
        TestScript: |
          $currentVersion = [scriptblock]::Create($GetScript).Invoke()[0].Version
          $expectedVersion = 4  # 每次更新配置时递增此版本号
          return $currentVersion -eq $expectedVersion
        SetScript: |
          # 查找 syncthing
          $syncthingPath = (Get-Command "syncthing.exe" -ErrorAction Stop).Source
          if (-not $caddyPath) {
              throw "Syncthing executable not found in PATH"
          }

          # 创建计划任务
          $taskName = "Syncthing Startup"

          $action = New-ScheduledTaskAction `
            -Execute $syncthingPath `
            -Argument "--no-console --no-browser --no-upgrade"

          $trigger = New-ScheduledTaskTrigger `
            -AtStartup `
            -RandomDelay "00:01:00"

          $principal = New-ScheduledTaskPrincipal `
            -UserId "$env:USERDOMAIN\$env:USERNAME" `
            -LogonType S4U `
            -RunLevel Limited

          $settings = New-ScheduledTaskSettingsSet `
            -AllowStartIfOnBatteries `
            -DontStopIfGoingOnBatteries `
            -StartWhenAvailable `
            -ExecutionTimeLimit ([System.TimeSpan]::Zero) `
            -RestartCount 10 `
            -RestartInterval (New-TimeSpan -Minutes 5)

          # 在描述中包含版本号
          $description = "Auto start Syncthing at system startup. Version: 4"

          # 总是删除并重新创建任务
          Unregister-ScheduledTask -TaskName $taskName -Confirm:$false -ErrorAction SilentlyContinue

          # 关键：使用正确的参数创建任务，不需要额外设置密码
          Register-ScheduledTask `
            -TaskName $taskName `
            -Action $action `
            -Trigger $trigger `
            -Principal $principal `
            -Settings $settings `
            -Description $description `
            -Force

    - directives:
        description: Install TIM
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Tencent.TIM

    - directives:
        description: Install WeChat
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Tencent.WeChat

    - directives:
        description: Install Steam
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: Valve.Steam

    - directives:
        description: Install XnViewMP
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: XnSoft.XnViewMP

    - directives:
        description: Install ZeroTierOne
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: ZeroTier.ZeroTierOne

    - directives:
        description: Install Everything
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: voidtools.Everything

    - directives:
        description: Install SpaceSniffer
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: UderzoSoftware.SpaceSniffer

    - directives:
        description: Install HWMonitor
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: CPUID.HWMonitor

    - directives:
        description: Install CrystalDiskMark
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: CrystalDewWorld.CrystalDiskMark

    - directives:
        description: Install CrystalDiskInfo
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: CrystalDewWorld.CrystalDiskInfo

    # Microsoft Store 应用
    - directives:
        description: Install Bluetooth Audio Receiver
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: 9N9WCLWDQS5J
        source: msstore

    - directives:
        description: Install Microsoft To Do
      resource: Microsoft.WinGet.DSC/WinGetPackage
      settings:
        id: 9NBLGGH5R558
        source: msstore
